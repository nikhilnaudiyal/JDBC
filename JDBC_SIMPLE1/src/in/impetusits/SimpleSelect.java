/* The following code can be used as a template.  
 Simply substitute the appropriate url, login, 
 and password, and then substitute the SQL statement
 you want to send to the database.

 Description:	
 Test program for Oracle API interface.  
 This java application will connect to a JDBC driver,
 issue a select statement and display all result 
 columns and rows

JDBC to ODBC Bridge

 ODBC is not appropriate for direct use from Java, since it is a C interface;calls from Java to native C code have a number of drawbacks in the security,implementation, robustness, and automatic portability of applications.

 */
package in.impetusits;

import java.io.FileWriter;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
//import oracle.jdbc.*;

class SimpleSelect {

    public static void main(String[] args) {
        // jdbc:subprotocol:subname
        String dburl = "jdbc:oracle:thin:@localHost:1521:XE";
        String query = "SELECT employee_id,first_name,last_name FROM employees where department_id < 50";
        ResultSet rs = null;
        Statement stmt = null;
        Connection con = null;
        try {
            /*
             Retrieves an Enumeration with 
             all of the currently loaded
             JDBC drivers to which the current 
             caller has access.
             DriverManager.getDrivers();
             */
            // Load the jdbc driver
            Class.forName("oracle.jdbc.OracleDriver");

//          Sets the logging/tracing PrintWriter object 
//          that is used by the DriverManager and all drivers.
            FileWriter fw = new FileWriter("e:\\log.txt");
            PrintWriter pw = new PrintWriter(fw);
            DriverManager.setLogWriter(pw);

            // Attempt to connect to a driver.  Each one
            // of the registered drivers will be loaded until
            // one is found that can process this URL
            con = DriverManager.getConnection(dburl, "hr", "hr");

            // If we were unable to connect, an exception
            // would have been thrown.  So, if we get here,
            // we are successfully connected to the dbURL
            // Check for, and display and warnings generated
            // by the connect.
            boolean isWarn = checkForWarning(con.getWarnings());
            if (isWarn) {
                System.out.println("Some warning Displayed");
            } else {
                System.out.println("Good ! No Warnings!");
            }
            /*
             DatabaseMetaData gives comprehensive information
             about the database as a whole.
             Get the DatabaseMetaData object and display
             some information about the connection
             */
            DatabaseMetaData dma = con.getMetaData();

            System.out.println("\nConnected to " + dma.getURL());
            System.out.println("Driver       " + dma.getDriverName());
            System.out.println("Version      " + dma.getDriverVersion());
            System.out.println("");

            /* Create a Statement object so we can submit
             SQL statements to the driver
             The object used for executing a static SQL 
             statement and returning the results it produces.
             createStatement() Creates a Statement object for 
             sending SQL statements to the database.
             */
            stmt = con.createStatement();

//            REsult Set :A table of data represents 
//            a database result set, which is usually 
//            generated by executing a statement that 
//            queries the database.
//            Submit a query, creating a ResultSet object
//            executeQuery() Executes the given SQL statement, 
//            which returns a single ResultSet object.
            rs = stmt.executeQuery(query);

            // Display all columns and rows from the result set
            dispResultSet(rs);

        } catch (SQLException ex) {

            // A SQLException was generated.  Catch it and
            // display the error information.  Note that there
            // could be multiple error objects chained
            // together
            System.out.println("\n*** SQLException caught ***\n");

            //writeing details to log file
            DriverManager.println(query);

            //cycle through all errors if any
            while (ex != null) {
                System.out.println("SQLState: " + ex.getSQLState());
                System.out.println("Message:  " + ex.getMessage());
                System.out.println("Vendor:   " + ex.getErrorCode());
                ex = ex.getNextException();
                System.out.println("");
            }
        } catch (java.lang.Exception ex) {

            // Got some other type of exception.  Dump it.
            ex.printStackTrace();
        } finally {
            try {
                // Close the result set
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                System.err.println("Error rs");
            }
            try {
                // Close the statement
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException e) {
                System.err.println("Error stmt");
            }
            try {
                // Close the connection
                if (con != null) {
                    con.close();
                }
            } catch (SQLException e) {
                System.err.println("Error conn");
            }

        }
    }

    // Checks for and displays warnings.  Returns true if a warning  existed
    private static boolean checkForWarning(SQLWarning warn) throws SQLException {
        boolean rc = false;

        // If a SQLWarning object was given, display the  warning messages.  Note that there could be
        // multiple warnings chained together
        if (warn != null) {
            System.out.println("\n *** Warning ***\n");
            rc = true;
            while (warn != null) {
                System.out.println("SQLState: " + warn.getSQLState());
                System.out.println("Message:  " + warn.getMessage());
                System.out.println("Vendor:   " + warn.getErrorCode());
                System.out.println("");
                warn = warn.getNextWarning();
            }
        }
        return rc;
    }

    // Displays all columns and rows in the given result set
    private static void dispResultSet(ResultSet rs) throws SQLException {
        int i;

        /*An object of ResultSetMetaData can be 
          used to get information about the 
          types and properties of the columns 
          in a ResultSet object.

         Get the ResultSetMetaData.  This will be used for
         the column headings
         */
        ResultSetMetaData rsmd = rs.getMetaData();

        // Get the number of columns in the result set
        int numCols = rsmd.getColumnCount();

        // Display column headings
        for (i = 1; i <= numCols; i++) {
            if (i > 1) {
                System.out.print(" , ");
            }
            System.out.print(rsmd.getColumnLabel(i));
        }
        System.out.println("");

        // Display data, fetching until end of the result set
        boolean more = rs.next();
        while (more) {
            // Loop through each column, getting the
            // column data and displaying
            for (i = 1; i <= numCols; i++) {
                if (i > 1) {
                    System.out.print(" , ");
                }
                System.out.print(rs.getString(i));
            }
            System.out.println(); //newline

            // Fetch the next result set row
            more = rs.next();
        }
    }

}
